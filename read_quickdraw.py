#!/usr/bin/env python
"""read_quickdraw.py

Utility script to read and inspect the QuickDraw LMDBs and key splits generated by prepare_quickdraw.py.

Usage:
    python read_quickdraw.py --out_dir QuickDraw --split train --num 5

Options:
    --out_dir    Directory containing QuickDraw_TrainData/, QuickDraw_TestData/, and QuickDraw_Keys.pickle
    --split      Which split to read: train, val, test, or all
    --num        How many samples to print (default: 10)

The script will load the key lists from the pickle, open the specified LMDB(s), and print information
on `num` samples: key, label, vector length, and PNG byte size.
"""
import argparse
import os
import lmdb
import pickle
import io
from PIL import Image
import numpy as np

def load_keys_pickle(path):
    with open(path, 'rb') as f:
        train_keys, val_keys, test_keys = pickle.load(f)
    return train_keys, val_keys, test_keys


def open_lmdb(path):
    env = lmdb.open(path, readonly=True, lock=False, subdir=True)
    return env


def read_samples(env, keys, num):
    """Read `num` samples from `env` by iterating through `keys` list."""
    with env.begin(buffers=True) as txn:
        for i, key in enumerate(keys[:num]):
            data = txn.get(key.encode())
            if data is None:
                print(f"  [Warning] Key {key} not found in LMDB")
                continue
            rec = pickle.loads(data)
            vec = rec['vector']
            label = rec['label']
            png_bytes = rec['png']
            print(f"Sample {i+1}/{num} | key={key} | label={label}")
            print(f"  - vector points: {len(vec)}")
            print(f"  - png size: {len(png_bytes)} bytes")
            # Optionally display image
            # img = Image.open(io.BytesIO(png_bytes))
            # img.show()
            print()


def main():
    parser = argparse.ArgumentParser(description="Read QuickDraw LMDBs and key splits")
    parser.add_argument('--out_dir', type=str, default='QuickDraw', help='Path to QuickDraw dir')
    parser.add_argument('--split', type=str, choices=['train', 'val', 'test', 'all'], default='train', help='Which split to read')
    parser.add_argument('--num', type=int, default=10, help='Number of samples to read')
    args = parser.parse_args()

    # Load key lists
    keys_path = os.path.join(args.out_dir, 'QuickDraw_Keys.pickle')
    train_keys, val_keys, test_keys = load_keys_pickle(keys_path)

    # Select splits
    splits = {}
    if args.split in ['train', 'all']:
        splits['train'] = train_keys
    if args.split in ['val', 'all']:
        splits['val'] = val_keys
    if args.split in ['test', 'all']:
        splits['test'] = test_keys

    # Open corresponding LMDBs and read
    for split_name, keys in splits.items():
        env_path = os.path.join(args.out_dir, f'QuickDraw_{split_name.capitalize()}Data')
        print(f"Reading {len(keys)} keys from split '{split_name}' at {env_path}")
        env = open_lmdb(env_path)
        read_samples(env, keys, args.num)
        env.close()

if __name__ == '__main__':
    main()
